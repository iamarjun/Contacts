// Generated by Dagger (https://google.github.io/dagger).
package com.example.contacts.dagger.module;

import com.example.contacts.ApiCaller;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class NetworkModule_ProvideApiCaller$app_debugFactory implements Factory<ApiCaller> {
  private final NetworkModule module;

  public NetworkModule_ProvideApiCaller$app_debugFactory(NetworkModule module) {
    this.module = module;
  }

  @Override
  public ApiCaller get() {
    return provideInstance(module);
  }

  public static ApiCaller provideInstance(NetworkModule module) {
    return proxyProvideApiCaller$app_debug(module);
  }

  public static NetworkModule_ProvideApiCaller$app_debugFactory create(NetworkModule module) {
    return new NetworkModule_ProvideApiCaller$app_debugFactory(module);
  }

  public static ApiCaller proxyProvideApiCaller$app_debug(NetworkModule instance) {
    return Preconditions.checkNotNull(
        instance.provideApiCaller$app_debug(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
